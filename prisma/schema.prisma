datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // e.g. "postgresql://user:password@localhost:5432/mydb"
}

generator client {
  provider = "prisma-client-js"
}

/**
 * Model: User
 * - Represents both Ad Board Owners (SSP) and Advertisers (DSP).
 */
model User {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  password      String?
  profilePicUrl String?  @default("")
  role          Role // "ADVERTISER" (DSP) or "OWNER" (SSP)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  ads      Ad[]      @relation("UserAds")
  adBoards AdBoard[] @relation("UserAdBoards")
  bookings Booking[] @relation("UserBookings")
  accounts Account[] @relation("UserAccounts")
  company  Company?
}

/**
 * Enum: Role
 * - Differentiates between Advertisers (DSP) and Ad Board Owners (SSP).
 */
enum Role {
  ADVERTISER
  OWNER
}

/**
 * Model: Ad
 * - Represents advertisements created by Advertisers (DSP) or Board Owners (SSP).
 */
model Ad {
  id           String   @id @default(uuid())
  createdById  String
  title        String
  downloadLink String?
  thumbnailUrl String?
  adDuration   String
  remarks      String
  videoUrl     String   @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  createdUser User      @relation("UserAds", fields: [createdById], references: [id])
  bookings    Booking[]
  adBoardId   String?

  @@index([title])
  @@index([createdById])
}

/**
 * Model: AdBoard
 * - Represents advertising boards created by SSP owners.
 */
model AdBoard {
  id                  String   @id @default(uuid())
  ownerId             String
  boardName           String
  location            String
  description         String?
  dimensions          String
  boardType           String
  isAvailable         Boolean
  dailyRate           Float
  operationalHours    String
  ownerContact        String
  lastMaintenanceDate DateTime
  imageUrl            String   @default("[]")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  // Relations
  owner               User                @relation("UserAdBoards", fields: [ownerId], references: [id])
  bookings            Booking[]           @relation("AdBoardBookings")
  boardAvailabilities BoardAvailability[] @relation("AdBoardAvailabilities")

  @@index([boardName])
  @@index([location])
  @@index([ownerId])
}

/**
 * Model: BoardAvailability
 * - Defines availability for specific dates and capacities.
 */
model BoardAvailability {
  id        String   @id @default(uuid())
  adBoardId String
  date      DateTime
  capacity  Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adBoard AdBoard @relation("AdBoardAvailabilities", fields: [adBoardId], references: [id])
}

/**
 * Model: Booking
 * - Associates DSP advertisers with an Ad Board over a date range.
 */
model Booking {
  id        String   @id @default(uuid())
  userId    String
  adId      String
  adBoardId String
  startDate DateTime
  endDate   DateTime
  status    String?  @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation("UserBookings", fields: [userId], references: [id])
  ad      Ad      @relation(fields: [adId], references: [id])
  adBoard AdBoard @relation("AdBoardBookings", fields: [adBoardId], references: [id])
}

/**
 * Model: Account
 * - Handles OAuth accounts for users.
 */
model Account {
  id                 String    @id @default(uuid())
  userId             String
  provider           String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?

  user User @relation("UserAccounts", fields: [userId], references: [id])

  @@index([userId])
  @@index([provider])
  @@index([providerAccountId])
}

/**
 * Model: Company
 * - Associates a user with a company (for Advertisers in DSP).
 */
model Company {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique

  user User @relation(fields: [userId], references: [id])

  @@index([name])
}
