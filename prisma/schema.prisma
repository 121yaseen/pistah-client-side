datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // e.g. "postgresql://user:password@localhost:5432/mydb"
}

generator client {
  provider = "prisma-client-js"
}

/**
 * Model: User
 * - Stores both normal users and ad board owners.
 */
model User {
  userId    Int      @id @default(autoincrement())
  name      String
  email     String   @unique
  password  String
  role      String // e.g. "USER" or "OWNER"
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  ads      Ad[]      @relation("UserAds")
  adBoards AdBoard[] @relation("UserAdBoards")
  bookings Booking[] @relation("UserBookings")
}

/**
 * Model: Ad
 * - Includes the new fields: downloadLink, thumbnailUrl
 * - adType can be 'ONLINE' or 'OFFLINE' if needed.
 */
model Ad {
  adId         Int     @id @default(autoincrement())
  createdBy    Int
  title        String
  description  String?
  adType       String?
  downloadLink String?
  thumbnailUrl String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User      @relation("UserAds", fields: [createdBy], references: [userId])
  bookings Booking[]
}

/**
 * Model: AdBoard
 * - Includes the new fields: boardName, boardLength, boardWidth, dailyRate,
 * operationalHours, thumbnailUrl
 */
model AdBoard {
  adBoardId        Int     @id @default(autoincrement())
  ownerId          Int
  location         String
  description      String?
  defaultCapacity  Int     @default(10)
  boardName        String // NEW FIELD
  boardLength      Float? // NEW FIELD
  boardWidth       Float? // NEW FIELD
  dailyRate        Float? // NEW FIELD
  operationalHours String? // NEW FIELD
  thumbnailUrl     String? // NEW FIELD

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  owner               User                @relation("UserAdBoards", fields: [ownerId], references: [userId])
  bookings            Booking[]           @relation("AdBoardBookings")
  boardAvailabilities BoardAvailability[] @relation("AdBoardAvailabilities")
}

/**
 * Model: BoardAvailability
 * - Optional table if you need to store custom per-day capacity or closures.
 */
model BoardAvailability {
  boardAvailId Int      @id @default(autoincrement())
  adBoardId    Int
  date         DateTime
  capacity     Int?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  adBoard AdBoard @relation("AdBoardAvailabilities", fields: [adBoardId], references: [adBoardId])
}

/**
 * Model: Booking
 * - Ties a user, an ad, and an ad board together over a date range.
 */
model Booking {
  bookingId Int      @id @default(autoincrement())
  userId    Int
  adId      Int
  adBoardId Int
  startDate DateTime
  endDate   DateTime
  status    String?  @default("PENDING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation("UserBookings", fields: [userId], references: [userId])
  ad      Ad      @relation(fields: [adId], references: [adId])
  adBoard AdBoard @relation("AdBoardBookings", fields: [adBoardId], references: [adBoardId])
}
